geserKiri(5);  // Parameter 5 berarti akan melakukan 5 langkah geser kiri  delay(2000);Code_PerbaikiFix4_coba1.ino - Ini adalah file utama Arduino yang berisi setup() dan loop()1_Variable.h - Berisi definisi variabel dan konstanta yang digunakanCalculation.ino - Berisi perhitungan untuk gerakan hexapodAction.ino - Berisi fungsi-fungsi untuk gerakan robot2_Servo.ino - Berisi kode untuk mengontrol servo DynamixelSensor.ino - Berisi kode untuk membaca sensorBT.ino - Berisi kode untuk komunikasi BluetoothKalibrasi.ino - Berisi kode untuk kalibrasi servoPID.ino - Berisi kode untuk kontrol PIDBerdasarkan kode yang saya lihat, ini adalah robot Hexapod yang menggunakan 18 servo Dynamixel (3 DOF per kaki x 6 kaki). Mari saya jelaskan cara menjalankannya:Persiapan Hardware:Arduino MegaDynamixel Shield18 servo Dynamixel (ID 1-18)Sensor-sensor (terlihat dari kode ada sensor api dan sensor lainnya)Modul Bluetooth untuk kontrolOLED displayBuzzerKipasCara Menjalankan:Upload kode Code_PerbaikiFix4_coba1.ino ke Arduino Mega menggunakan Arduino IDEPastikan semua koneksi hardware sudah benar:Dynamixel Shield terpasang di Arduino MegaSemua servo Dynamixel terhubung dengan benarSensor-sensor terhubung ke pin yang sesuaiModul Bluetooth terhubungStruktur Kode:setup(): Inisialisasi semua komponen (servo, sensor, Bluetooth, dll)loop(): Program utama yang berjalan terus menerusKontrol robot bisa dilakukan melalui:Bluetooth (menggunakan aplikasi di smartphone)Tombol-tombol pada robotSensor-sensor untuk otonomiFitur Utama:Kontrol gerakan dasar (jalan, belok, dll)Deteksi apiKontrol capit/gripperKalibrasi servoKontrol PID untuk gerakan yang lebih halusInterface OLED untuk monitoringPenyimpanan setting di EEPROMCara Mengontrol:Menggunakan aplikasi Bluetooth di smartphoneRobot memiliki beberapa mode:Mode kalibrasiMode normalMode SAR (pencarian api)Mode manualUntuk memulai, saya sarankan:Pastikan semua hardware terhubung dengan benarUpload kode ke Arduino MegaMulai dengan mode kalibrasi untuk memastikan semua servo berfungsi dengan benarSetelah kalibrasi selesai, coba gerakan dasar seperti berjalanPelajari fungsi-fungsi di Action.ino untuk memahami gerakan yang tersediaGunakan aplikasi Bluetooth untuk mengontrol robotApakah ada bagian spesifik yang ingin Anda ketahui lebih detail? Misalnya tentang:Cara kalibrasi servoCara mengontrol gerakanCara menggunakan fitur SARCara mengatur parameter PIDCara menggunakan aplikasi BluetoothYa, robot Hexapod tetap bisa berjalan meskipun tidak menggunakan sensor. Mari saya periksa kode untuk memastikan bagian mana yang bisa dijalankan tanpa sensor.Mari saya periksa juga file Action.ino untuk melihat gerakan-gerakan yang tersedia:Berdasarkan analisis kode, saya bisa mengatakan bahwa robot Hexapod tetap bisa berjalan meskipun tidak menggunakan sensor. Berikut penjelasannya:Fitur Dasar yang Tetap Bisa Digunakan:Gerakan dasar:maju() - Berjalan ke depanmundur() - Berjalan ke belakanggeserKanan() - Bergerak ke kanangeserKiri() - Bergerak ke kiribelokKanan() - Berputar ke kananbelokKiri() - Berputar ke kirinaik() - Mengangkat badanturun() - Menurunkan badanduduk() - Posisi dudukberdiri() - Posisi berdiriYang Perlu Diperhatikan:Kode ini memiliki beberapa bagian yang terkait dengan sensor (seperti wasakaUltraSonic(), bacaApi(), dll) tapi ini tidak mempengaruhi fungsi dasar robotSemua gerakan dasar menggunakan perhitungan matematis untuk posisi servo, bukan bergantung pada input sensorCara Menjalankan Tanpa Sensor:Upload kode ke Arduino MegaPastikan semua servo Dynamixel terhubung dengan benarSetelah upload, robot akan melakukan inisialisasi:Normalisasi posisi servo (semua servo ke posisi tengah)Kalibrasi dasarRobot siap untuk dikontrolCara Mengontrol:Menggunakan aplikasi Bluetooth di smartphoneAtau bisa dimodifikasi untuk menggunakan tombol/joystick langsungTips Penggunaan:Mulai dengan gerakan lambat untuk memastikan semua servo berfungsi dengan baikGunakan fungsi duduk() dan berdiri() untuk memastikan robot dalam posisi yang stabilJika ingin mengubah kecepatan, gunakan fungsi dengan suffix "Spd" (contoh: majuSpd(), mundurSpd())Yang Bisa Dimodifikasi:Bisa menghapus atau menonaktifkan kode yang terkait dengan sensorBisa menambahkan kontrol manual menggunakan tombol/joystickBisa menyesuaikan parameter gerakan (kecepatan, sudut, dll)//  ===== Variable Servo ===== ////const float DXL_PROTOCOL_VERSION = 1.0;////Dynamixel2Arduino dxl(DXL_SERIAL, DXL_DIR_PIN);#include "1_Variable.h"byte printOut = 0;int P36 = 6;byte smothtly = 1; //1, 2, 3, 4 //default 3int JS = 6; //6, 12, 18, 24 smoothly //default 18//byte smothtly = 2; //1, 2, 3, 4 //default 3//int JS = 12; //6, 12, 18, 24 smoothly //default 18byte calSt = 1;byte dir = 1;byte pushSt = 1;//BTbyte btSt = 0;byte activeSt = 0;byte clrSt = 0;byte oledSt = 0;byte kipasSt = 0;byte apiSt = 0;byte buzzerApiSt = 0;int menuSt = 0;byte runSt = 0;//EEPROM.writeInt(405, fireLimit); int buttonState = 1; bool Kondisi = false; int startJalan = 0;  int statRobot = 0; int statKondisi = 0; int mtc = 1; bool adaApi = false; int atas = 155; int tengah = 20; int bawah = 60;const int buttonPin = 2;  // Pin untuk push buttonint lastButtonState = 0;int buttonPressCount = 0;// Pin definitions#define DXL_SERIAL Serial1#define DXL_DIR_PIN 2#define DXL_PROTOCOL_VERSION 1.0// Servo IDs untuk kaki pertama (kanan depan)#define COXA_ID 3    // Servo coxa (pangkal)#define FEMUR_ID 2   // Servo femur (paha)#define TIBIA_ID 1   // Servo tibia (betis)// Inisialisasi DynamixelDynamixel2Arduino dxl(DXL_SERIAL, DXL_DIR_PIN);// Variabel untuk posisi servoint coxaPos = 512;   // Posisi tengah coxaint femurPos = 512;  // Posisi tengah femurint tibiaPos = 512;  // Posisi tengah tibia// Variabel untuk gerakanbool isMoving = false;int moveStep = 0;const int totalSteps = 4;void setup() {    CapitAtas.attach(20);  CapitTengah.attach(19);  CapitBawah.attach(18);    CapitTengah.write(tengah);  CapitAtas.write(atas);  CapitBawah.write(bawah);  delay(1000);   //Dynamxel=======================================    // put your setup code here, to run once:    // Use UART port of DYNAMIXEL Shield to debug.  DEBUG_SERIAL.begin(115200);//  Serial.begin(115200);  while(!DEBUG_SERIAL);  // Set Port baudrate to 57600bps. This has to match with DYNAMIXEL baudrate.  dxl.begin(1000000);  // Set Port Protocol Version. This has to match with DYNAMIXEL protocol version.  dxl.setPortProtocolVersion(DXL_PROTOCOL_VERSION);    // Get DYNAMIXEL information  dxl.ping(COXA_ID);  dxl.ping(FEMUR_ID);  dxl.ping(TIBIA_ID);  // Turn off torque when configuring items in EEPROM area  // ===== Coxa ===== //  // Kanan  dxl.torqueOff(COXA_ID);  dxl.setOperatingMode(COXA_ID, OP_POSITION);  dxl.torqueOn(COXA_ID);  // Kiri  dxl.torqueOff(FEMUR_ID);  dxl.setOperatingMode(FEMUR_ID, OP_POSITION);  dxl.torqueOn(FEMUR_ID);  // ===== Femur ===== //  // Kanan  dxl.torqueOff(TIBIA_ID);  dxl.setOperatingMode(TIBIA_ID, OP_POSITION);  dxl.torqueOn(TIBIA_ID);  // ===== Tibia ===== //  // ===== Limit the maximum velocity in Position Control Mode ===== //  dxl.writeControlTableItem(PROFILE_VELOCITY, COXA_ID, 200);  dxl.writeControlTableItem(PROFILE_VELOCITY, FEMUR_ID, 200);  dxl.writeControlTableItem(PROFILE_VELOCITY, TIBIA_ID, 200);  // Posisi awal  moveToPosition(512, 512, 512);  delay(1000);      // ===== Goals Servo 3 ===== //////  setupServoDynamixel(1);//maju(5,1);//  wasakaUltraSonic(); }void loop1() { // ini untuk mencoba fungsi dari bbrp void//  normalisasiKapit();  //oledNavigator();  //timer();  //action();  //Serial.print("btSt ");  //Serial.println(btSt);  //delay(500);  //setServoA(45, 100); // Gripper 100 tutup, 30 buka  //setServoB(46, 180);  //0 UP  180 Down  //testServo(47); // kipas  //teganganBaterai();  //kalibrasi();  //bacaApi();  //ukurJarak();}/*void loop() {  //if (oledSt == 1) oledNavigator();  //if (btSt == 1)  bluetoothControl();  if (calSt == 1) {    gaitsTrajectoryCalculation(smothtly);    moveToCalculation(dir);    calSt = 0;  } else {    runningMainProgram();    //runningMainProgram1();  }  timer();}*/bool case13 = true;bool case14 = true;int jangka = 0;bool done = false;//int update_interval = 1000; // time interval in ms for updating panel indicatorsunsigned long last_time = 0; // time of last update//int tambah1 = 1;//int waktu_sebelumnya = 0;bool ikutKanan = false;bool tombol = true;bool startRobot = false;bool ruanganSatu = false;bool statAngkat = true;int puteranKanan = 0;int puteranKiri = 0;//Manuver rintanganbool perjalanan = false;bool rintangan_satu = false;bool keluar_kondisi_satu = false;//int servoCapit = 20;//int pos = 90; //maju(5,1);int runServo = 1;void loop() {// geserKanan(0);//    while(true){//      wasakaUltraSonic();//      berjalanCobaBGTT(); //  }  // Gerakan kaki  switch(moveStep) {    case 0: // Angkat kaki      moveToPosition(coxaPos, femurPos - 100, tibiaPos + 50);      break;    case 1: // Maju      moveToPosition(coxaPos + 100, femurPos - 100, tibiaPos + 50);      break;    case 2: // Turun      moveToPosition(coxaPos + 100, femurPos, tibiaPos);      break;    case 3: // Kembali      moveToPosition(coxaPos, femurPos, tibiaPos);      break;  }    // Tunggu gerakan selesai  delay(1000);    // Update step  moveStep = (moveStep + 1) % totalSteps;}// Fungsi untuk menggerakkan semua servo ke posisi tertentuvoid moveToPosition(int coxa, int femur, int tibia) {  dxl.setGoalPosition(COXA_ID, coxa);  dxl.setGoalPosition(FEMUR_ID, femur);  dxl.setGoalPosition(TIBIA_ID, tibia);    // Update posisi saat ini  coxaPos = coxa;  femurPos = femur;  tibiaPos = tibia;}void nyariApi(){  switch (runSt) {  case 20: // lilin//        bacaApi();        break;      case 21://        padamkanLilin();        break;      case 22:        putarKiriAction(2, 80, 50, 10, 15, 23);        break;      case 23:        putarKananAction(3, 80, 50, 10, 15, 24);        break;      case 24:        pompaOff();        break;  }}void cariApi(){  switch(runSt){  case 20: // lilin//        bacaApi();        break;      case 21:        putarKananAction(1, 80, 50, 10, 10, 22);        break;      case 22:        putarKiriAction(1, 80, 50, 10, 10, 24);        break;      case 23:        pompaOn();        delay(2000);        jumlahLangkah = 0;        runSt=21;        break;      case 24:        pompaOff();        break;      case 30://        mundurAction(2, 80, 40, 10, 20, 31);        break;      case 99:        break;  }}void berjalan4(){  switch(runSt){      case 0:        putarKiriAction(20, 70, 50, 10, 8, 3);//        putarKanan(0);        while(jarak[2]<20 && jarak[4]<20 && jumlahLangkah > 2 ){           runSt=4;//          majuAction(8, 70, 45, 0, 5, 4);        majuAction(0, 60, 45, 10, 5, 4); // Koding yang sebelumnya//            majuJalan(0,5);//          deteksiJarak();        }        break;      case 1:        break;      case 2:        putarKananAction(20, 70, 50, 10, 8, 1);        while(jarak[2]<20 && jarak[4]<20 && jumlahLangkah > 2){          runSt=4;          majuAction(0, 60, 45, 10, 5, 4);//          majuAction(8, 70, 45, 0, 5, 4);//            majuJalan(0,5);//          deteksiJarak();        }        break;      case 3:      majuAngkat(0,25,60,5,10);        break;      case 4:        deteksiJarak();        break;      case 5:        break;  }}void berjalanCoba(){  switch(runSt){      case 0:        // == Terdeteksi Depan == //        while(jarak[0] < 10 ){          runSt=4;          mundur(0);        }        break;      case 1:        break;      case 2:        // == Terdeteksi Depan == //        while( jarak[5] < 10 ){          runSt=4;//          majuAction(8, 70, 45, 0, 4, 4);            majuJalan(0,5);//          deteksiJarak();        }        break;      case 3:        break;      case 4:        deteksiJarakCoba();        break;      case 5:        break;  }}void berjalanCobaBGTT(){  wasakaUltraSonic();  switch(runSt){      case 0:      wasakaUltraSonic();              maju(0,1);        while(distanceKiriDepan < 12 ){//          runSt=4;          putarKanan(10);          if (distanceKiriDepan > 25 && distanceBelakang > 15) {            break;          }                }         while(distanceKananDepan < 12 ){//          runSt=4;          putarKiri(10);          if (distanceKananDepan > 25 &&  distanceBelakang > 15) {            break;          }                }        while(distanceDepan < 12 ){//          runSt=4;          mundur(5);          if (distanceDepan > 25) {            break;          }        }        //        jumlahLangkah = 0;        break;      case 1:        break;      case 2:        putarKiri(20);        while(distanceKiriDepan <20 && distanceKananBelakang<20 && jumlahLangkah > 2){          runSt=4;            maju(0,1);        }        break;      case 5:        break;  }}void berjalanCobaBGTt(){  switch(runSt){      case 0:        putarKanan(20);        while(distanceDepan > 20 && distanceBelakang > 20 && jumlahLangkah > 3 ){          runSt=4;        }         break;      case 1:        break;      case 2:        putarKiri(20);        while(distanceKiriDepan <20 && distanceKananBelakang<20 && jumlahLangkah > 2){          runSt=4;            maju(0,1);        }        break;      case 3:        break;      case 4:        wasakaUltraSonic();              maju(0,1);        while(distanceKiriDepan < 13 ){//          runSt=4;          putarKanan(10);          if (distanceKiriDepan > 30 && distanceDepan > 30 && distanceBelakang > 20) {            break;          }                }         while(distanceKananDepan < 13 ){//          runSt=4;          putarKiri(10);          if (distanceKananDepan > 30  && distanceDepan > 30 &&  distanceBelakang > 20) {            break;          }                }//        jumlahLangkah = 0        break;      case 5:        break;  }}void berjalanCobaBGT(){  switch(runSt){      case 0:        putarKanan(20);        while(distanceDepan > 20 && distanceBelakang > 20 && jumlahLangkah > 3 ){          runSt=4;          maju(0,1);        }        break;      case 1:        break;      case 2:        putarKiri(20);        while(distanceKiriDepan <20 && distanceKananBelakang<20 && jumlahLangkah > 2){          runSt=4;            maju(0,1);        }        break;      case 3:        break;      case 4:        deteksiJarakFix();        break;      case 5:        break;  }}void berjalan(){  switch(runSt){      case 0:        putarKananAction(20, 70, 50, 10, 8, 1);//        putarKanan(0);        while(jarak[2]<20 && jarak[4]<20 && jumlahLangkah > 2 ){          runSt=4;//          majuAction(8, 70, 45, 0, 4, 4);            majuJalan(0,5);//          deteksiJarak();        }        break;      case 1:        break;      case 2:        putarKiriAction(20, 70, 50, 10, 8, 3);        while(jarak[2]<20 && jarak[4]<20 && jumlahLangkah > 2){          runSt=4;//          majuAction(8, 70, 45, 0, 4, 4);            majuJalan(0,5);//          deteksiJarak();        }        break;      case 3:        break;      case 4:        deteksiJarak();        break;      case 5:        break;  }}void ruangan1Api(){  switch(runSt){    case 1:      break;  }}void ksri() {  wasakaUltraSonic();  switch(runSt){      case 0:      geserKanan(20);      wasakaUltraSonic();        while(distanceKiriDepan < 12 && distanceDepan > 20){          putarKanan(10);          if (distanceKiriDepan > 25 && distanceBelakang > 15) {            break;          }                }         while(distanceKananDepan < 12 ){//          runSt=4;          putarKiri(10);          if (distanceKananDepan > 25 &&  distanceBelakang > 15) {            break;          }                }        while(distanceDepan < 12 ){//          runSt=4;          mundur(5);          if (distanceDepan > 25) {            break;          }        }        //        jumlahLangkah = 0;        break;      case 1:        break;      case 2:        putarKiri(20);        while(distanceKiriDepan <20 && distanceKananBelakang<20 && jumlahLangkah > 2){          runSt=4;            maju(0,1);        }        break;      case 5:        break;  }}void ruangan1Korban(){  switch(runSt){      case 10:        tarok();        delay(1000);        runSt = 11;        break;      case 11:        angkat();        delay(1000);        runSt = 12;        break;      case 12:              putarKanan(1);        while(case14){          jangka=jumlahLangkah+1;          case14=false;        }        while(jangka==jumlahLangkah){          runSt = 13;           break;         }        break;      case 13:        maju(0,mtc);//mundur1(20);          if(jarak[0]<20){            mundur1(1);            runSt=14;          }      case 14:        putarKananAction(6, 80, 85, 10, 8, 14);        if(jarak[0]>60){          runSt=15;        }        break;      case 15:      while(jarak[3]<18){          tarok();          delay(200);          runSt = 15;          break;      }        break;      case 16:        mundur1(1);        if(jarak[0]<105 && jarak[0]>90){          angkat();          delay(800);          runSt = 17;        }        break;      case 17:        deteksiJarakRuangan1();        break;      case 18:        putarKananAction(6, 80, 85, 10, 8, 16);        while(jarak[0]>70){          majuAction(5, 70, 45, 0, 2, 17);          runSt=19;        }//        while(case14){//          jangka=jumlahLangkah+3;//          case14=false;//        }//        while(jangka==jumlahLangkah){//          runSt = 16;  //        }        break;      case 19:      maju(0,mtc);//      putarKananAction(6, 80, 53, 10, 5, 18);//        while(jarak[0]>70){//          maju(0);//          runSt=19;//        }//        putarKananAction(9, 80, 85, 10, 5, 12);//      while(jarak[4]<42 && jumlahLangkah > 6){//          mundur(0);//          runSt=13;//      }        break;      case 20:        putarKanan(0.5);//        runSt=20;        break;      case 21://        runSt=20;        break;  }}/*void runningMainProgram1() {  switch (runSt) {    case 0:      break;    case 1:      maju(0);      break;    case 60:      mundur(2);      break;  }}void runningBergerak(){//  runSt = jalanBergerak();  switch (runSt) {      case 0:        break;      case 1:        maju(0);        //majuAction(0, 70, 50, 10, 99);        //majuAction(0, 80, 30, 0, 99);        break;      case 2:        belokKanan(0.5);        break;      case 3:        putarKanan(0);        break;      case 5:        mundur(0);        break;      case 7:        putarKiri(0);        break;      case 8:        belokKiri(0.5);        break;      case 9:        action();        break;      case 10:        stanBy();        break;      case 11:        geserKiri(2);        break;      case 12:        geserKanan(2);        break;      case 13:        setupServo(1);        runSt = 0;        break;      case 60:        //mundur1(3);        break;      case 61:        //putarKanan1(6);        break;      case 20: // lilin        bacaApi();        break;      case 21:        padamkanLilin();        break;      case 22:        putarKiriAction(2, 80, 50, 10, 15, 23);        break;      case 23:        putarKananAction(3, 80, 50, 10, 15, 24);        break;      case 24:        kipasOff();        break;      case 30://        mundurAction(2, 80, 40, 10, 20, 31);        break;      case 31:        putarKananAction(6, 80, 50, 10, 15, 32);        break;      case 32://        mundurAction(2, 80, 40, 10, 20, 33);        break;      case 33:        gripperClose();        angkat();        runSt = 34;        break;      case 34:        putarKiriAction(6, 80, 50, 10, 15, 35);        break;      case 35:        break;    }}void runningMainProgram() {  if (activeSt == 1) {    switch (runSt) {      case 0:        break;      case 1:        maju(0);        //majuAction(0, 70, 50, 10, 99);        //majuAction(0, 80, 30, 0, 99);        break;         case 2:        belokKanan(0.5);        break;      case 3:        putarKanan(0);        break;      case 5:        mundur(0);        break;      case 7:        putarKiri(0);        break;      case 8:        belokKiri(0.5);        break;      case 9:        action();        break;      case 10:        stanBy();        break;      case 11:        geserKiri(2);        break;      case 12:        geserKanan(2);        break;      case 13:        setupServo(1);        runSt = 0;        break;      case 60:        //mundur1(3);        break;      case 61:        //putarKanan1(6);        break;      case 20: // lilin        bacaApi();        break;      case 21:        padamkanLilin();        break;      case 22:        putarKiriAction(2, 80, 50, 10, 15, 23);        break;      case 23:        putarKananAction(3, 80, 50, 10, 15, 24);        break;      case 24:        kipasOff();        break;      case 30://        mundurAction(2, 80, 40, 10, 20, 31);        break;      case 31:        putarKananAction(6, 80, 50, 10, 15, 32);        break;      case 32://        mundurAction(2, 80, 40, 10, 20, 33);        break;      case 33:        gripperClose();        angkat();        runSt = 34;        break;      case 34:        putarKiriAction(6, 80, 50, 10, 15, 35);        break;      case 35:        break;    }  }}*/void action() {  if (langkah < addStep)    langkah++;  action_1(langkah);}void stanBy() {  if (directionSt != 1) {    moveToCalculation(2);    directionSt = 1;  }  if (langkah >= addStep / 2) {    if (langkah < addStep) {      langkah++;      moveTo(langkah);    }  } else if (langkah > 1) {    numberStep -= 1;    langkah--;    moveTo(langkah);  }}